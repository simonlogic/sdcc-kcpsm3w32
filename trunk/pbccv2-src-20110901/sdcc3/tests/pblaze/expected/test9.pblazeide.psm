;--------------------------------------------------------
; File Created by SDCC : free open source ANSI-C Compiler
; Version 3.0.1 #6227 (Feb 20 2011) (Linux)
; This file was generated Fri Apr 22 14:08:58 2011
;--------------------------------------------------------
;--------------------------------------------------------
; global & static initialisations
;--------------------------------------------------------
	_main_c_1_1_0	EQU $00

	LOAD	sF, $3f
	JUMP	__sdcc_program_startup
;--------------------------------------------------------
; Home
;--------------------------------------------------------
__sdcc_program_startup:
	CALL	_main
;	return from main will lock up
__sdcc_loop:
	JUMP	__sdcc_loop
;--------------------------------------------------------
; code
;--------------------------------------------------------
;------------------------------------------------------------
;Allocation info for local variables in function 'main'
;------------------------------------------------------------
;------------------------------------------------------------
_main:
	;	test9.c:7: void main()
	;	test9.c:9: volatile char c = 1;
	LOAD	s0, $01
	STORE	s0, _main_c_1_1_0
	;	test9.c:10: c = !c;
	FETCH	s0, _main_c_1_1_0
	LOAD	s1, $00
	COMP	s0, $00
	JUMP	NZ, _LC00101
	LOAD	s1, $01
_LC00101:
	STORE	s1, _main_c_1_1_0
	;	test9.c:11: c = 0;
	LOAD	s0, $00
	STORE	s0, _main_c_1_1_0
	;	test9.c:12: c = !c;
	FETCH	s0, _main_c_1_1_0
	LOAD	s1, $00
	COMP	s0, $00
	JUMP	NZ, _LC00102
	LOAD	s1, $01
_LC00102:
	STORE	s1, _main_c_1_1_0
	;	test9.c:13: c = c && c;
	FETCH	s0, _main_c_1_1_0
	COMP	s0, $00
	JUMP	NZ, _LC00103
	JUMP	_L00103
_LC00103:
	FETCH	s0, _main_c_1_1_0
	COMP	s0, $00
	JUMP	Z, _LC00104
	JUMP	_L00104
_LC00104:
_L00103:
	LOAD	s0, $00
	JUMP	_L00105
_L00104:
	LOAD	s0, $01
_L00105:
	STORE	s0, _main_c_1_1_0
	;	test9.c:14: c = c || c;
	FETCH	s0, _main_c_1_1_0
	COMP	s0, $00
	JUMP	Z, _LC00105
	JUMP	_L00107
_LC00105:
	FETCH	s0, _main_c_1_1_0
	COMP	s0, $00
	JUMP	Z, _LC00106
	JUMP	_L00107
_LC00106:
	LOAD	s0, $00
	JUMP	_L00108
_L00107:
	LOAD	s0, $01
_L00108:
	STORE	s0, _main_c_1_1_0
	;	test9.c:15: c = 29;
	LOAD	s0, $1d
	STORE	s0, _main_c_1_1_0
	;	test9.c:16: c = c % 13;
	FETCH	s0, _main_c_1_1_0
	LOAD	sB, s0
	LOAD	sC, $0d
	CALL	__moduschar
	LOAD	s0, sB
	STORE	s0, _main_c_1_1_0
_L00101:
	RET

__moduchar:
__moduschar:
	CALL	__divuschar
	XOR	sB, sC
	XOR	sC, sB
	XOR	sB, sC
	RET

__divuchar:
	LOAD	sE, $08
	LOAD	sD, sC
	LOAD	sC, $00
_L00107:
	SL0	sB
	SLA	sC
	COMP	sC, sD
	JUMP	C, _L00108
	SUB	sC, sD
	ADD	sB, $01
_L00108:
	SUB	sE, $01
	JUMP	NZ, _L00107
	RET
;--------------------------------------------------------
; interrupt vector 
;--------------------------------------------------------
