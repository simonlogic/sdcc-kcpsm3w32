;--------------------------------------------------------
; File Created by SDCC : free open source ANSI-C Compiler
; Version 3.0.1 #6227 (Feb 20 2011) (Linux)
; This file was generated Fri Apr 22 14:09:05 2011
;--------------------------------------------------------
;--------------------------------------------------------
; global & static initialisations
;--------------------------------------------------------
	_main_c_1_1_0	EQU $00
	_main_d_1_1_0	EQU $01
	_main_e_1_1_0	EQU $02

	LOAD	sF, $3f
	JUMP	__sdcc_program_startup
;--------------------------------------------------------
; Home
;--------------------------------------------------------
__sdcc_program_startup:
	CALL	_main
;	return from main will lock up
__sdcc_loop:
	JUMP	__sdcc_loop
;--------------------------------------------------------
; code
;--------------------------------------------------------
;------------------------------------------------------------
;Allocation info for local variables in function 'main'
;------------------------------------------------------------
;------------------------------------------------------------
_main:
	;	test7.c:3: void main()
	;	test7.c:5: volatile unsigned char c = 1;
	LOAD	s0, $01
	STORE	s0, _main_c_1_1_0
	;	test7.c:6: volatile unsigned char d = 1;
	LOAD	s0, $01
	STORE	s0, _main_d_1_1_0
	;	test7.c:7: volatile unsigned char e = 15;
	LOAD	s0, $0f
	STORE	s0, _main_e_1_1_0
	;	test7.c:9: c <<= 4;
	FETCH	s0, _main_c_1_1_0
	SL0	s0
	SL0	s0
	SL0	s0
	SL0	s0
	STORE	s0, _main_c_1_1_0
	;	test7.c:11: c >>= 3;
	FETCH	s0, _main_c_1_1_0
	SR0	s0
	SR0	s0
	SR0	s0
	STORE	s0, _main_c_1_1_0
	;	test7.c:13: c |= c;
	FETCH	s0, _main_c_1_1_0
	FETCH	s1, _main_c_1_1_0
	OR	s1, s0
	STORE	s1, _main_c_1_1_0
	;	test7.c:15: c |= d + 1;
	FETCH	s0, _main_d_1_1_0
	ADD	s0, $01
	FETCH	s1, _main_c_1_1_0
	OR	s1, s0
	STORE	s1, _main_c_1_1_0
	;	test7.c:17: c = c & d;
	FETCH	s0, _main_c_1_1_0
	FETCH	s1, _main_d_1_1_0
	AND	s0, s1
	STORE	s0, _main_c_1_1_0
	;	test7.c:19: d = ~e;
	FETCH	s0, _main_e_1_1_0
	XOR	s0, $ff
	STORE	s0, _main_d_1_1_0
	;	test7.c:21: e = c ^ d;
	FETCH	s0, _main_d_1_1_0
	FETCH	s1, _main_c_1_1_0
	XOR	s1, s0
	STORE	s1, _main_e_1_1_0
	;	test7.c:23: c = !c && d || e;
	FETCH	s0, _main_c_1_1_0
	LOAD	s1, $00
	COMP	s0, $00
	JUMP	NZ, _LC00101
	LOAD	s1, $01
_LC00101:
	COMP	s1, $00
	JUMP	NZ, _LC00102
	JUMP	_L00108
_LC00102:
	FETCH	s0, _main_d_1_1_0
	COMP	s0, $00
	JUMP	Z, _LC00103
	JUMP	_L00109
_LC00103:
_L00108:
	LOAD	s0, $00
	JUMP	_L00110
_L00109:
	LOAD	s0, $01
_L00110:
	COMP	s0, $00
	JUMP	Z, _LC00104
	JUMP	_L00106
_LC00104:
	FETCH	s0, _main_e_1_1_0
	COMP	s0, $00
	JUMP	Z, _LC00105
	JUMP	_L00106
_LC00105:
	LOAD	s0, $00
	JUMP	_L00107
_L00106:
	LOAD	s0, $01
_L00107:
	STORE	s0, _main_c_1_1_0
	;	test7.c:24: c = c || e;
	FETCH	s0, _main_c_1_1_0
	COMP	s0, $00
	JUMP	Z, _LC00106
	JUMP	_L00112
_LC00106:
	FETCH	s0, _main_e_1_1_0
	COMP	s0, $00
	JUMP	Z, _LC00107
	JUMP	_L00112
_LC00107:
	LOAD	s0, $00
	JUMP	_L00113
_L00112:
	LOAD	s0, $01
_L00113:
	STORE	s0, _main_c_1_1_0
	;	test7.c:26: if (!c)
	FETCH	s0, _main_c_1_1_0
	COMP	s0, $00
	JUMP	Z, _LC00108
	JUMP	_L00103
_LC00108:
	;	test7.c:28: c = -e;
	FETCH	s0, _main_e_1_1_0
	LOAD	s1, s0
	XOR	s1, $ff
	ADD	s1, $01
	STORE	s1, _main_c_1_1_0
_L00103:
	RET
;--------------------------------------------------------
; interrupt vector 
;--------------------------------------------------------
