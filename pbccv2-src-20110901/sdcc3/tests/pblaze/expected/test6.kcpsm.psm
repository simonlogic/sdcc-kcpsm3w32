;--------------------------------------------------------
; File Created by SDCC : free open source ANSI-C Compiler
; Version 3.0.1 #6227 (Feb 20 2011) (Linux)
; This file was generated Fri Apr 22 14:21:55 2011
;--------------------------------------------------------
;--------------------------------------------------------
; global & static initialisations
;--------------------------------------------------------
	CONSTANT	_val_0, 00
	CONSTANT	_c_0, 01

;------------------------------------------------------------
;Allocation info for local variables in function 'main'
;------------------------------------------------------------
;------------------------------------------------------------
	;	test6.c:3: char  __xdata val = 0;
	LOAD	s0, 00
	STORE	s0, _val_0
	LOAD	sF, 3f
	JUMP	__sdcc_program_startup
;--------------------------------------------------------
; Home
;--------------------------------------------------------
__sdcc_program_startup:
	CALL	_main
;	return from main will lock up
__sdcc_loop:
	JUMP	__sdcc_loop
;--------------------------------------------------------
; code
;--------------------------------------------------------
;------------------------------------------------------------
;Allocation info for local variables in function 'main'
;------------------------------------------------------------
;------------------------------------------------------------
	;	test6.c:6: void interruptHandler() __interrupt
interruptHandler:
	;	test6.c:8: val++;		
	STORE	s0, (sF)
	SUB	sF, 01
	STORE	s1, (sF)
	SUB	sF, 01
	FETCH	s1, _val_0
	LOAD	s0, s1
	ADD	s0, 01
	ADD	sF, 01
	FETCH	s1, (sF)
	ADD	sF, 01
	FETCH	s0, (sF)
	STORE	s0, _val_0
	RETURNI ENABLE
;------------------------------------------------------------
;Allocation info for local variables in function 'main'
;------------------------------------------------------------
;------------------------------------------------------------
_main:
	;	test6.c:11: void main()
	;	test6.c:13: c = 0;
	LOAD	s0, 00
	;	test6.c:16: __endasm;
	  EINT
_L00106:
_L00102:
	;	test6.c:20: c += 4;
	ADD	s0, 04
	JUMP	_L00102
_L00104:
	STORE	s0, _c_0
	RETURN
;--------------------------------------------------------
; interrupt vector 
;--------------------------------------------------------
	ADDRESS	3ff
	JUMP	interruptHandler
